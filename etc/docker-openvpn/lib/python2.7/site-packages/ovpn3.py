# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ovpn3', [dirname(__file__)])
        except ImportError:
            import _ovpn3
            return _ovpn3
        if fp is not None:
            try:
                _mod = imp.load_module('_ovpn3', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ovpn3 = swig_import_helper()
    del swig_import_helper
else:
    import _ovpn3
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class IPv4Addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv4Addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPv4Addr, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    SIZE = _ovpn3.IPv4Addr_SIZE
    __swig_getmethods__["from_addr"] = lambda x: _ovpn3.IPv4Addr_from_addr
    if _newclass:from_addr = staticmethod(_ovpn3.IPv4Addr_from_addr)
    __swig_getmethods__["from_uint32"] = lambda x: _ovpn3.IPv4Addr_from_uint32
    if _newclass:from_uint32 = staticmethod(_ovpn3.IPv4Addr_from_uint32)
    __swig_getmethods__["from_ulong"] = lambda x: _ovpn3.IPv4Addr_from_ulong
    if _newclass:from_ulong = staticmethod(_ovpn3.IPv4Addr_from_ulong)
    def to_ulong(self): return _ovpn3.IPv4Addr_to_ulong(self)
    __swig_getmethods__["from_long"] = lambda x: _ovpn3.IPv4Addr_from_long
    if _newclass:from_long = staticmethod(_ovpn3.IPv4Addr_from_long)
    def to_long(self): return _ovpn3.IPv4Addr_to_long(self)
    __swig_getmethods__["from_bytes"] = lambda x: _ovpn3.IPv4Addr_from_bytes
    if _newclass:from_bytes = staticmethod(_ovpn3.IPv4Addr_from_bytes)
    __swig_getmethods__["from_zero"] = lambda x: _ovpn3.IPv4Addr_from_zero
    if _newclass:from_zero = staticmethod(_ovpn3.IPv4Addr_from_zero)
    __swig_getmethods__["from_one"] = lambda x: _ovpn3.IPv4Addr_from_one
    if _newclass:from_one = staticmethod(_ovpn3.IPv4Addr_from_one)
    __swig_getmethods__["from_zero_complement"] = lambda x: _ovpn3.IPv4Addr_from_zero_complement
    if _newclass:from_zero_complement = staticmethod(_ovpn3.IPv4Addr_from_zero_complement)
    __swig_getmethods__["netmask_from_prefix_len"] = lambda x: _ovpn3.IPv4Addr_netmask_from_prefix_len
    if _newclass:netmask_from_prefix_len = staticmethod(_ovpn3.IPv4Addr_netmask_from_prefix_len)
    def netmask_from_extent(self): return _ovpn3.IPv4Addr_netmask_from_extent(self)
    __swig_getmethods__["from_string"] = lambda x: _ovpn3.IPv4Addr_from_string
    if _newclass:from_string = staticmethod(_ovpn3.IPv4Addr_from_string)
    def to_string(self): return _ovpn3.IPv4Addr_to_string(self)
    __swig_getmethods__["from_hex"] = lambda x: _ovpn3.IPv4Addr_from_hex
    if _newclass:from_hex = staticmethod(_ovpn3.IPv4Addr_from_hex)
    def to_hex(self): return _ovpn3.IPv4Addr_to_hex(self)
    def arpa(self): return _ovpn3.IPv4Addr_arpa(self)
    def __and__(self, *args): return _ovpn3.IPv4Addr___and__(self, *args)
    def __or__(self, *args): return _ovpn3.IPv4Addr___or__(self, *args)
    def __add__(self, *args): return _ovpn3.IPv4Addr___add__(self, *args)
    def __sub__(self, *args): return _ovpn3.IPv4Addr___sub__(self, *args)
    def __mul__(self, *args): return _ovpn3.IPv4Addr___mul__(self, *args)
    def __div__(self, *args): return _ovpn3.IPv4Addr___div__(self, *args)
    def __mod__(self, *args): return _ovpn3.IPv4Addr___mod__(self, *args)
    def __lshift__(self, *args): return _ovpn3.IPv4Addr___lshift__(self, *args)
    def __rshift__(self, *args): return _ovpn3.IPv4Addr___rshift__(self, *args)
    def __invert__(self): return _ovpn3.IPv4Addr___invert__(self)
    def network_addr(self, *args): return _ovpn3.IPv4Addr_network_addr(self, *args)
    def __eq__(self, *args): return _ovpn3.IPv4Addr___eq__(self, *args)
    def __ne__(self, *args): return _ovpn3.IPv4Addr___ne__(self, *args)
    def __lt__(self, *args): return _ovpn3.IPv4Addr___lt__(self, *args)
    def __gt__(self, *args): return _ovpn3.IPv4Addr___gt__(self, *args)
    def __le__(self, *args): return _ovpn3.IPv4Addr___le__(self, *args)
    def __ge__(self, *args): return _ovpn3.IPv4Addr___ge__(self, *args)
    def unspecified(self): return _ovpn3.IPv4Addr_unspecified(self)
    def specified(self): return _ovpn3.IPv4Addr_specified(self)
    def all_zeros(self): return _ovpn3.IPv4Addr_all_zeros(self)
    def all_ones(self): return _ovpn3.IPv4Addr_all_ones(self)
    def prefix_len(self): return _ovpn3.IPv4Addr_prefix_len(self)
    def host_len(self): return _ovpn3.IPv4Addr_host_len(self)
    def extent_from_netmask(self): return _ovpn3.IPv4Addr_extent_from_netmask(self)
    __swig_getmethods__["prefix_len_32"] = lambda x: _ovpn3.IPv4Addr_prefix_len_32
    if _newclass:prefix_len_32 = staticmethod(_ovpn3.IPv4Addr_prefix_len_32)
    def hashval(self): return _ovpn3.IPv4Addr_hashval(self)
    def __str__(self): return _ovpn3.IPv4Addr___str__(self)
    def __repr__(self): return _ovpn3.IPv4Addr___repr__(self)
    def __hash__(self): return _ovpn3.IPv4Addr___hash__(self)
    marshall_type = str

    __swig_destroy__ = _ovpn3.delete_IPv4Addr
IPv4Addr_swigregister = _ovpn3.IPv4Addr_swigregister
IPv4Addr_swigregister(IPv4Addr)

def IPv4Addr_from_addr(*args):
  return _ovpn3.IPv4Addr_from_addr(*args)
IPv4Addr_from_addr = _ovpn3.IPv4Addr_from_addr

def IPv4Addr_from_uint32(*args):
  return _ovpn3.IPv4Addr_from_uint32(*args)
IPv4Addr_from_uint32 = _ovpn3.IPv4Addr_from_uint32

def IPv4Addr_from_ulong(*args):
  return _ovpn3.IPv4Addr_from_ulong(*args)
IPv4Addr_from_ulong = _ovpn3.IPv4Addr_from_ulong

def IPv4Addr_from_long(*args):
  return _ovpn3.IPv4Addr_from_long(*args)
IPv4Addr_from_long = _ovpn3.IPv4Addr_from_long

def IPv4Addr_from_bytes(*args):
  return _ovpn3.IPv4Addr_from_bytes(*args)
IPv4Addr_from_bytes = _ovpn3.IPv4Addr_from_bytes

def IPv4Addr_from_zero():
  return _ovpn3.IPv4Addr_from_zero()
IPv4Addr_from_zero = _ovpn3.IPv4Addr_from_zero

def IPv4Addr_from_one():
  return _ovpn3.IPv4Addr_from_one()
IPv4Addr_from_one = _ovpn3.IPv4Addr_from_one

def IPv4Addr_from_zero_complement():
  return _ovpn3.IPv4Addr_from_zero_complement()
IPv4Addr_from_zero_complement = _ovpn3.IPv4Addr_from_zero_complement

def IPv4Addr_netmask_from_prefix_len(*args):
  return _ovpn3.IPv4Addr_netmask_from_prefix_len(*args)
IPv4Addr_netmask_from_prefix_len = _ovpn3.IPv4Addr_netmask_from_prefix_len

def IPv4Addr_from_string(*args):
  return _ovpn3.IPv4Addr_from_string(*args)
IPv4Addr_from_string = _ovpn3.IPv4Addr_from_string

def IPv4Addr_from_hex(*args):
  return _ovpn3.IPv4Addr_from_hex(*args)
IPv4Addr_from_hex = _ovpn3.IPv4Addr_from_hex

def IPv4Addr_prefix_len_32(*args):
  return _ovpn3.IPv4Addr_prefix_len_32(*args)
IPv4Addr_prefix_len_32 = _ovpn3.IPv4Addr_prefix_len_32

class IPv6Addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPv6Addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPv6Addr, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    SIZE = _ovpn3.IPv6Addr_SIZE
    __swig_getmethods__["from_addr"] = lambda x: _ovpn3.IPv6Addr_from_addr
    if _newclass:from_addr = staticmethod(_ovpn3.IPv6Addr_from_addr)
    __swig_getmethods__["from_string"] = lambda x: _ovpn3.IPv6Addr_from_string
    if _newclass:from_string = staticmethod(_ovpn3.IPv6Addr_from_string)
    def to_string(self): return _ovpn3.IPv6Addr_to_string(self)
    __swig_getmethods__["from_hex"] = lambda x: _ovpn3.IPv6Addr_from_hex
    if _newclass:from_hex = staticmethod(_ovpn3.IPv6Addr_from_hex)
    def to_hex(self): return _ovpn3.IPv6Addr_to_hex(self)
    __swig_getmethods__["from_ulong"] = lambda x: _ovpn3.IPv6Addr_from_ulong
    if _newclass:from_ulong = staticmethod(_ovpn3.IPv6Addr_from_ulong)
    def to_ulong(self): return _ovpn3.IPv6Addr_to_ulong(self)
    __swig_getmethods__["from_long"] = lambda x: _ovpn3.IPv6Addr_from_long
    if _newclass:from_long = staticmethod(_ovpn3.IPv6Addr_from_long)
    def to_long(self): return _ovpn3.IPv6Addr_to_long(self)
    def arpa(self): return _ovpn3.IPv6Addr_arpa(self)
    __swig_getmethods__["from_zero"] = lambda x: _ovpn3.IPv6Addr_from_zero
    if _newclass:from_zero = staticmethod(_ovpn3.IPv6Addr_from_zero)
    __swig_getmethods__["from_one"] = lambda x: _ovpn3.IPv6Addr_from_one
    if _newclass:from_one = staticmethod(_ovpn3.IPv6Addr_from_one)
    __swig_getmethods__["from_zero_complement"] = lambda x: _ovpn3.IPv6Addr_from_zero_complement
    if _newclass:from_zero_complement = staticmethod(_ovpn3.IPv6Addr_from_zero_complement)
    __swig_getmethods__["netmask_from_prefix_len"] = lambda x: _ovpn3.IPv6Addr_netmask_from_prefix_len
    if _newclass:netmask_from_prefix_len = staticmethod(_ovpn3.IPv6Addr_netmask_from_prefix_len)
    def netmask_from_extent(self): return _ovpn3.IPv6Addr_netmask_from_extent(self)
    def __and__(self, *args): return _ovpn3.IPv6Addr___and__(self, *args)
    def __or__(self, *args): return _ovpn3.IPv6Addr___or__(self, *args)
    def __add__(self, *args): return _ovpn3.IPv6Addr___add__(self, *args)
    def __sub__(self, *args): return _ovpn3.IPv6Addr___sub__(self, *args)
    def __mul__(self, *args): return _ovpn3.IPv6Addr___mul__(self, *args)
    def __div__(self, *args): return _ovpn3.IPv6Addr___div__(self, *args)
    def __mod__(self, *args): return _ovpn3.IPv6Addr___mod__(self, *args)
    def __lshift__(self, *args): return _ovpn3.IPv6Addr___lshift__(self, *args)
    def __rshift__(self, *args): return _ovpn3.IPv6Addr___rshift__(self, *args)
    def __invert__(self): return _ovpn3.IPv6Addr___invert__(self)
    def network_addr(self, *args): return _ovpn3.IPv6Addr_network_addr(self, *args)
    def __eq__(self, *args): return _ovpn3.IPv6Addr___eq__(self, *args)
    def __ne__(self, *args): return _ovpn3.IPv6Addr___ne__(self, *args)
    def __lt__(self, *args): return _ovpn3.IPv6Addr___lt__(self, *args)
    def __gt__(self, *args): return _ovpn3.IPv6Addr___gt__(self, *args)
    def __le__(self, *args): return _ovpn3.IPv6Addr___le__(self, *args)
    def __ge__(self, *args): return _ovpn3.IPv6Addr___ge__(self, *args)
    def unspecified(self): return _ovpn3.IPv6Addr_unspecified(self)
    def specified(self): return _ovpn3.IPv6Addr_specified(self)
    def all_zeros(self): return _ovpn3.IPv6Addr_all_zeros(self)
    def all_ones(self): return _ovpn3.IPv6Addr_all_ones(self)
    def bit(self, *args): return _ovpn3.IPv6Addr_bit(self, *args)
    def prefix_len(self): return _ovpn3.IPv6Addr_prefix_len(self)
    def host_len(self): return _ovpn3.IPv6Addr_host_len(self)
    def extent_from_netmask(self): return _ovpn3.IPv6Addr_extent_from_netmask(self)
    def hashval(self): return _ovpn3.IPv6Addr_hashval(self)
    def __str__(self): return _ovpn3.IPv6Addr___str__(self)
    def __repr__(self): return _ovpn3.IPv6Addr___repr__(self)
    def __hash__(self): return _ovpn3.IPv6Addr___hash__(self)
    marshall_type = str

    __swig_destroy__ = _ovpn3.delete_IPv6Addr
IPv6Addr_swigregister = _ovpn3.IPv6Addr_swigregister
IPv6Addr_swigregister(IPv6Addr)

def IPv6Addr_from_addr(*args):
  return _ovpn3.IPv6Addr_from_addr(*args)
IPv6Addr_from_addr = _ovpn3.IPv6Addr_from_addr

def IPv6Addr_from_string(*args):
  return _ovpn3.IPv6Addr_from_string(*args)
IPv6Addr_from_string = _ovpn3.IPv6Addr_from_string

def IPv6Addr_from_hex(*args):
  return _ovpn3.IPv6Addr_from_hex(*args)
IPv6Addr_from_hex = _ovpn3.IPv6Addr_from_hex

def IPv6Addr_from_ulong(*args):
  return _ovpn3.IPv6Addr_from_ulong(*args)
IPv6Addr_from_ulong = _ovpn3.IPv6Addr_from_ulong

def IPv6Addr_from_long(*args):
  return _ovpn3.IPv6Addr_from_long(*args)
IPv6Addr_from_long = _ovpn3.IPv6Addr_from_long

def IPv6Addr_from_zero():
  return _ovpn3.IPv6Addr_from_zero()
IPv6Addr_from_zero = _ovpn3.IPv6Addr_from_zero

def IPv6Addr_from_one():
  return _ovpn3.IPv6Addr_from_one()
IPv6Addr_from_one = _ovpn3.IPv6Addr_from_one

def IPv6Addr_from_zero_complement():
  return _ovpn3.IPv6Addr_from_zero_complement()
IPv6Addr_from_zero_complement = _ovpn3.IPv6Addr_from_zero_complement

def IPv6Addr_netmask_from_prefix_len(*args):
  return _ovpn3.IPv6Addr_netmask_from_prefix_len(*args)
IPv6Addr_netmask_from_prefix_len = _ovpn3.IPv6Addr_netmask_from_prefix_len

class IPAddr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPAddr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPAddr, name)
    UNSPEC = _ovpn3.IPAddr_UNSPEC
    V4 = _ovpn3.IPAddr_V4
    V6 = _ovpn3.IPAddr_V6
    V4_SIZE = _ovpn3.IPAddr_V4_SIZE
    V6_SIZE = _ovpn3.IPAddr_V6_SIZE
    def __init__(self, *args): 
        this = _ovpn3.new_IPAddr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["validate"] = lambda x: _ovpn3.IPAddr_validate
    if _newclass:validate = staticmethod(_ovpn3.IPAddr_validate)
    __swig_getmethods__["is_valid"] = lambda x: _ovpn3.IPAddr_is_valid
    if _newclass:is_valid = staticmethod(_ovpn3.IPAddr_is_valid)
    __swig_getmethods__["from_string"] = lambda x: _ovpn3.IPAddr_from_string
    if _newclass:from_string = staticmethod(_ovpn3.IPAddr_from_string)
    __swig_getmethods__["from_hex"] = lambda x: _ovpn3.IPAddr_from_hex
    if _newclass:from_hex = staticmethod(_ovpn3.IPAddr_from_hex)
    __swig_getmethods__["from_ipv4"] = lambda x: _ovpn3.IPAddr_from_ipv4
    if _newclass:from_ipv4 = staticmethod(_ovpn3.IPAddr_from_ipv4)
    __swig_getmethods__["from_ipv6"] = lambda x: _ovpn3.IPAddr_from_ipv6
    if _newclass:from_ipv6 = staticmethod(_ovpn3.IPAddr_from_ipv6)
    __swig_getmethods__["from_ulong"] = lambda x: _ovpn3.IPAddr_from_ulong
    if _newclass:from_ulong = staticmethod(_ovpn3.IPAddr_from_ulong)
    def to_ulong(self): return _ovpn3.IPAddr_to_ulong(self)
    __swig_getmethods__["from_long"] = lambda x: _ovpn3.IPAddr_from_long
    if _newclass:from_long = staticmethod(_ovpn3.IPAddr_from_long)
    def to_long(self): return _ovpn3.IPAddr_to_long(self)
    __swig_getmethods__["from_zero"] = lambda x: _ovpn3.IPAddr_from_zero
    if _newclass:from_zero = staticmethod(_ovpn3.IPAddr_from_zero)
    __swig_getmethods__["from_one"] = lambda x: _ovpn3.IPAddr_from_one
    if _newclass:from_one = staticmethod(_ovpn3.IPAddr_from_one)
    __swig_getmethods__["from_zero_complement"] = lambda x: _ovpn3.IPAddr_from_zero_complement
    if _newclass:from_zero_complement = staticmethod(_ovpn3.IPAddr_from_zero_complement)
    __swig_getmethods__["netmask_from_prefix_len"] = lambda x: _ovpn3.IPAddr_netmask_from_prefix_len
    if _newclass:netmask_from_prefix_len = staticmethod(_ovpn3.IPAddr_netmask_from_prefix_len)
    def netmask_from_extent(self): return _ovpn3.IPAddr_netmask_from_extent(self)
    def to_string(self): return _ovpn3.IPAddr_to_string(self)
    def to_hex(self): return _ovpn3.IPAddr_to_hex(self)
    def arpa(self): return _ovpn3.IPAddr_arpa(self)
    def __add__(self, *args): return _ovpn3.IPAddr___add__(self, *args)
    def __sub__(self, *args): return _ovpn3.IPAddr___sub__(self, *args)
    def __mul__(self, *args): return _ovpn3.IPAddr___mul__(self, *args)
    def __div__(self, *args): return _ovpn3.IPAddr___div__(self, *args)
    def __mod__(self, *args): return _ovpn3.IPAddr___mod__(self, *args)
    def __and__(self, *args): return _ovpn3.IPAddr___and__(self, *args)
    def __or__(self, *args): return _ovpn3.IPAddr___or__(self, *args)
    def __lshift__(self, *args): return _ovpn3.IPAddr___lshift__(self, *args)
    def __rshift__(self, *args): return _ovpn3.IPAddr___rshift__(self, *args)
    def __invert__(self): return _ovpn3.IPAddr___invert__(self)
    def network_addr(self, *args): return _ovpn3.IPAddr_network_addr(self, *args)
    def __eq__(self, *args): return _ovpn3.IPAddr___eq__(self, *args)
    def __ne__(self, *args): return _ovpn3.IPAddr___ne__(self, *args)
    def __lt__(self, *args): return _ovpn3.IPAddr___lt__(self, *args)
    def __gt__(self, *args): return _ovpn3.IPAddr___gt__(self, *args)
    def __le__(self, *args): return _ovpn3.IPAddr___le__(self, *args)
    def __ge__(self, *args): return _ovpn3.IPAddr___ge__(self, *args)
    def unspecified(self): return _ovpn3.IPAddr_unspecified(self)
    def specified(self): return _ovpn3.IPAddr_specified(self)
    def all_zeros(self): return _ovpn3.IPAddr_all_zeros(self)
    def all_ones(self): return _ovpn3.IPAddr_all_ones(self)
    def defined(self): return _ovpn3.IPAddr_defined(self)
    def version_string(self): return _ovpn3.IPAddr_version_string(self)
    __swig_getmethods__["version_string_static"] = lambda x: _ovpn3.IPAddr_version_string_static
    if _newclass:version_string_static = staticmethod(_ovpn3.IPAddr_version_string_static)
    def version(self): return _ovpn3.IPAddr_version(self)
    def is_compatible(self, *args): return _ovpn3.IPAddr_is_compatible(self, *args)
    def verify_version_consistency(self, *args): return _ovpn3.IPAddr_verify_version_consistency(self, *args)
    def validate_netmask(self): return _ovpn3.IPAddr_validate_netmask(self)
    def prefix_len(self): return _ovpn3.IPAddr_prefix_len(self)
    def host_len(self): return _ovpn3.IPAddr_host_len(self)
    def extent_from_netmask(self): return _ovpn3.IPAddr_extent_from_netmask(self)
    def size(self): return _ovpn3.IPAddr_size(self)
    __swig_getmethods__["version_size"] = lambda x: _ovpn3.IPAddr_version_size
    if _newclass:version_size = staticmethod(_ovpn3.IPAddr_version_size)
    def hashval(self): return _ovpn3.IPAddr_hashval(self)
    def __str__(self): return _ovpn3.IPAddr___str__(self)
    def __repr__(self): return _ovpn3.IPAddr___repr__(self)
    def __hash__(self): return _ovpn3.IPAddr___hash__(self)
    marshall_type = str

    __swig_destroy__ = _ovpn3.delete_IPAddr
IPAddr_swigregister = _ovpn3.IPAddr_swigregister
IPAddr_swigregister(IPAddr)

def IPAddr_validate(*args):
  return _ovpn3.IPAddr_validate(*args)
IPAddr_validate = _ovpn3.IPAddr_validate

def IPAddr_is_valid(*args):
  return _ovpn3.IPAddr_is_valid(*args)
IPAddr_is_valid = _ovpn3.IPAddr_is_valid

def IPAddr_from_string(*args):
  return _ovpn3.IPAddr_from_string(*args)
IPAddr_from_string = _ovpn3.IPAddr_from_string

def IPAddr_from_hex(*args):
  return _ovpn3.IPAddr_from_hex(*args)
IPAddr_from_hex = _ovpn3.IPAddr_from_hex

def IPAddr_from_ipv4(*args):
  return _ovpn3.IPAddr_from_ipv4(*args)
IPAddr_from_ipv4 = _ovpn3.IPAddr_from_ipv4

def IPAddr_from_ipv6(*args):
  return _ovpn3.IPAddr_from_ipv6(*args)
IPAddr_from_ipv6 = _ovpn3.IPAddr_from_ipv6

def IPAddr_from_ulong(*args):
  return _ovpn3.IPAddr_from_ulong(*args)
IPAddr_from_ulong = _ovpn3.IPAddr_from_ulong

def IPAddr_from_long(*args):
  return _ovpn3.IPAddr_from_long(*args)
IPAddr_from_long = _ovpn3.IPAddr_from_long

def IPAddr_from_zero(*args):
  return _ovpn3.IPAddr_from_zero(*args)
IPAddr_from_zero = _ovpn3.IPAddr_from_zero

def IPAddr_from_one(*args):
  return _ovpn3.IPAddr_from_one(*args)
IPAddr_from_one = _ovpn3.IPAddr_from_one

def IPAddr_from_zero_complement(*args):
  return _ovpn3.IPAddr_from_zero_complement(*args)
IPAddr_from_zero_complement = _ovpn3.IPAddr_from_zero_complement

def IPAddr_netmask_from_prefix_len(*args):
  return _ovpn3.IPAddr_netmask_from_prefix_len(*args)
IPAddr_netmask_from_prefix_len = _ovpn3.IPAddr_netmask_from_prefix_len

def IPAddr_version_string_static(*args):
  return _ovpn3.IPAddr_version_string_static(*args)
IPAddr_version_string_static = _ovpn3.IPAddr_version_string_static

def IPAddr_version_size(*args):
  return _ovpn3.IPAddr_version_size(*args)
IPAddr_version_size = _ovpn3.IPAddr_version_size

# This file is compatible with both classic and new-style classes.


